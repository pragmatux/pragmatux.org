Quick-Start Guide for the Inforce Computing IFC6410
===================================================
:Author: Ryan Kuester
:Email: rkuester@insymbols.com
:Revision: Pre-Release Draft

This is a brief guide to creating a Pragmatux Workstation development
environment and Pragmatux Device filesystem images for the Inforce
Computing IFC6410 platform.

There is a community of Snapdragon(TM) users at
http://mydragonboard.org, with forums suitable for hardware questions.
Pragmatux software questions are best directed to the
mailto:pragmatux-users@lists.pragmatux.org[Pragmatux mailing list].

== Setup a Workstation

The development environment for creating programs, packages, and
filesystem images is a desktop, laptop, or server running the Wheezy
version of the Debian Linux distribution. Pragmatux refers to that
environment as the 'workstation,' as opposed to the embedded board, the
'device.'

The workstation need not be a physical machine; it is common to use a
virtual machine or a chroot within another operating system; however,
the workstation must be of the 'amd64' architecture.

. Install Debian Wheezy
+
Begin by http://www.debian.org/releases/wheezy/amd64[installing the
Debian Wheezy operating system] on any amd64 architecture machine. The
following commands are to be run on that machine, unless otherwise
stated.

. Add package sources for the Pragmatux SDK
+
Configure the workstation to use the Pragmatux SDK package sources by
downloading and installing the package
http://pragmatux.org/misc/apt-sources-ptux-sdk-ifc6410.deb[apt-sources-ptux-sdk-ifc6410].
+
To install:
+
....
# dpkg -i apt-sources-ptux-sdk-ifc6410.deb
....

. Have the package management system download the contents of the package
sources
+
....
# apt-get update
....

. Install the SDK for the IFC6410
+
....
# apt-get install --no-install-recommends ptux-sdk-ifc6410
....
+
This will install tens of packages containing the tools and code
libraries essential for cross-development targeting the IFC6410.

== Create device filesystem images

. Compose a filesystem using the default set of packages
+
....
$ mkdir wrk
$ cd wrk
$ fakeroot mkos-ifc6410
....
+
This will create two files, 'boot.img' containing the kernel and initramfs, and 
'ptux.img' containing the root filesystem. They will be written to the 
IFC6410's eMMC storage in subsequent steps.

When invoked without arguments, `mkos-ifc6410` composes a filesystem for
the device using a predefined list of packages. Via arguments, this list
can be modified and extended to define a customized filesystem for each
project using the platform.

Packages can be added to and removed from a running device using the
package management tools included in the base image.

== Connect a serial terminal

The IFC6410's 3-pin RS-232 header is connected to the processor's
primary serial line, to which bootloader and kernel messages are
directed, and on which a command shell is started. The serial line
parameters are 115200-8-N-1 (115200 bits per second, 8 data bits, no
parity bit, and 1 stop bit) at RS-232 signaling levels. The header's
location and pinout is given in the IFC6410's hardware reference manual,
found on the http://www.inforcecomputing.com/techweb[Inforce TechWeb].
You will likely need to make a custom cable to go from this header to a
DCE-pinout DE9 connector for connection to the workstation.

Use whatever serial terminal software and hardware you prefer; the
instructions below demonstrate using a USB-to-serial adapter on a Debian
Wheezy workstation and
http://www.gnu.org/software/screen/manual/screen.html[GNU screen] as a
terminal emulator.

. Connect a suitable cable between the device's RS-232 header and the
USB-to-serial adapter.

. Start screen as a terminal emulator.
+
....
# screen /dev/ttyUSB0 115200
....
+
For help, type 'ctrl-a' followed by '?'; and to quit, type 'ctrl-a' 'k'.

== Write device filesystem images to eMMC storage

. Put the device into 'fastboot' mode
+
Jumper pins 30 and 26 of the Expansion Connector (pulling GPIO6 low) as
shown in the photo in
http://mydragonboard.org/2013/forcing-ifc6410-into-fastboot[this blog
post] on the myDragonBoard.com community site and power the IFC6410 on.
The bootloader will pause in fastboot mode, listening to commands from a
fastboot client. Serial output from the bootloader will indicate it's
listening for fastboot comamnds.
+
....
Android Bootloader - UART_DM Initialized!!!
[0] welcome to lk

[10] platform_init()
[10] target_init()
[130] USB init ept @ 0x88f4e000
[170] fastboot_init()
[170] udc_start()
[300] -- reset --
[300] -- portchange --
[470] fastboot: processing commands
....

. Connect the device USB device port to the workstation, and verify 
connectivity
+
After making the USB connection and giving workstation a few seconds to
enumerate the new device, run the fastboot client to verify connectivity
to the bootloader. If the client is able to talk to the bootloader, it
will print the serial number of the DragonBoard.
+
....
# fastboot devices
b1732aaf        fastboot
....

. Write the kernel and initramfs to the 'boot' partition
+
Using the fastboot client on the workstation, write the 'boot.img' image 
containing the kernel and initramfs to the partition named 'boot'.
+
....
# fastboot flash boot boot.img
sending 'boot' (5474 KB)...
OKAY [  1.032s]
writing 'boot'...
OKAY [  1.093s]
finished. total time: 2.125s
....

. Write the root filesystem image to the 'userdata' partition
+
Using the fastboot client on the workstation, write the 'ptux.img' image
containing the root filesystem to the partition named 'userdata'.
+
....
# fastboot flash userdata ptux.img
sending 'userdata' (85797 KB)...
OKAY [  8.391s]
writing 'userdata'...
OKAY [ 27.812s]
finished. total time: 36.203s
....

Now the operating system has been installed on the device and it is
ready to be booted for the first time.

== Boot the device for the first time

Reset the device by cycling its power. Within seconds, the newly
installed kernel should boot and write considerable output to the serial
console. The first time the operating system starts, it will go through
a minute-long installation procedure and automatically reboot.

....
Setting up ncurses-base (5.7+20100313-5em1) ...
Setting up sensible-utils (0.0.4em1) ...
Setting up dpkg-autoconfigure (1.5~dev2) ...
Setting up devnodes-ptux (1.3) ...
Setting up sshd-run (1.0) ...
Setting up linux-db8060a (3.0.21-12374-gcae2925-1) ...
[....]
....

The installation generates much debugging, informational, and warning
output due to the unusual state of the system at installation time and
the inconsistent use of logging levels by several of the packages being
installed. While ignoring warnings is normally a bad practice, novice
users can safely ignore warnings in this output when installing a
default configuration unless the system fails to behave as expected
after the after the first boot.

On the second and all subsequent boots, a login prompt leading to a
command shell is offered on the serial port. The only account which
exists following a basic installation is 'root' with the password
'password'.

....
Pragmatux 3.0 ptux ttyHSL0

ptux login:
....
