Experimental: Bootloader for DragonBoard(TM) 8060A
==================================================
:Author: Ryan Kuester
:Email: rkuester@insymbols.com
:Revision: Pre-Release Draft

This is a brief guide to running the experimental Pragmatux bootloader.

== Introduction

The Pragmatux bootloader is a boot stage which finds and starts the primary
kernel and operating system. It follows other stages which have initialized the
essential hardware needed to run code. On the DragonBoard 8060A, the Pragmatux
bootloader is started by the application processor bootloader, 'lk'.

A device may have multiple storage devices and partitions on which the kernel
and OS images could be found. The kernel and OS may even be damaged or missing,
in which case the bootloader can restore them via the network or removable
media device.

In some implementations, the Pragmatux bootloader is an initramfs; however, if
a device has adequate storage, as in the case of the DragonBoard 8060A, the
bootloader may be a normal filesystem stored in flash.  This allows the
bootloader to contain features which would take too much space in an initramfs.

The current implementation boots straight to the primary OS stored on the
'userdata' partition. Although the current implementation contains the
prerequisite software and libraries, development of the high-level logic
governing the search and restore sequence is incomplete.  Stable snapshots
suitable for experimentation are being released as development continues.

This guide is an addendum to the link:quick-start-db8060a.html[Quick-Start
Guide for the DragonBoard 8060A]. Familiarity with the techniques in that
document are assumed.

== Instructions

. Compose the bootloader filesystem
+
....
$ fakeroot mkos-db8060a bootloader-db8060a
....
+
The same tool used to compose the primary Pragmatux OS filesystem image is used
to create the bootloader filesystem image. `mkos-db8060a` composes a filesystem
using the named package and the tree of packages defined by recursively
evaluating its dependences.

. Rename the generated image
+
....
$ mv ptux.img bootloader.img
....
+
The generated image will be named 'ptux.img'. Rename the image to
'bootloader.img' to avoid confusing it with the primary OS image.  This will be
unnecessary once `mkos-db8060a` offers an option to name the output image.

. Program the bootloader to the 'system' partition
+
....
# fastboot flash system bootloader.img
....

. Program the primary OS to the 'userdata' partition
+
....
# fastboot flash userdata ptux.img
....
+
The primary OS is generated according to the instructions of
link:quick-start-db8060a.html[the prerequisite guide]; however, instead of
programming the image to the 'system' partition, program it to the 'userdata'
partition. With this arrangement, the kernel will first boot to the bootloader
in 'system', and the bootloader will start the primary OS in 'userdata'.

== Usage

The DragonBoard will boot
http://pragmatux.org/docs/quick-start-db8060a.html#_boot_dragonboard_for_the_first_time[as
before]. Although the kernel will start the bootloader, the bootloader quickly
starts to the primary OS and no additional output is printed to the console.

Although the kernel boots to partition 'mmcblk0p12', the primary OS is running
from 'mmcblk0p13' as can be seen by examining the system's mounts:
....
target# cat /proc/mounts
rootfs / rootfs rw 0 0
/dev/mmcblk0p13 / ext4 rw,relatime,user_xattr,barrier=1,data=ordered 0 0
[....]
....
